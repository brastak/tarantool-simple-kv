pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
  client_header_buffer_size 4k;
  client_body_buffer_size 8k;
  client_max_body_size 8k;

  keepalive_timeout 60s;

  client_body_timeout 20;
  send_timeout 20;

  tcp_nopush on;
  tcp_nodelay on;

  limit_req_zone global zone=tarantool:64k rate=200r/s;

  upstream tnt {
        server tarantool-kv-app:3301 max_fails=1 fail_timeout=15s;
        keepalive 128;
  }

  server {
    listen 80 default deferred reuseport so_keepalive=on backlog=8192;

    location /tnt-proxy {
      internal;
      tnt_read_timeout 60m;
      if ( $request_method = POST ) {
        tnt_method "create";
      }
      if ( $request_method = GET ) {
        tnt_method "retrieve";
      }
      if ( $request_method = PUT ) {
        tnt_method "update";
      }
      if ( $request_method = DELETE ) {
        tnt_method "delete";
      }
      tnt_http_rest_methods post get put delete;
      tnt_multireturn_skip_count 1;
      tnt_pure_result on;
      tnt_pass_http_request on pass_body;
      tnt_pass tnt;
    }

    location /kv {
      limit_req zone=tarantool burst=200 nodelay;
      limit_req_status 429;

      if ($request_method !~ ^(POST|GET|PUT|DELETE)$) {
        return 405 "${request_method} is not allowed";
      }

      content_by_lua_block {
        local cjson = require('cjson')

        ngx.req.read_body()
        local payload = ngx.req.get_body_data()
        response = ngx.location.capture('/tnt-proxy', { body = payload })

        if response.status == ngx.HTTP_OK then
          local answer = cjson.decode(response.body)
          ngx.status = answer['code']
          if answer['code'] ~= ngx.HTTP_OK and answer['code'] ~= ngx.HTTP_CREATED then
            ngx.header.content_type = 'text/plain'
          else
            ngx.header.content_type = 'application/json' 
          end
          if answer['body'] ~= nil then
            ngx.say(answer['body'])
          end
        else
           ngx.status = 502
        end
        ngx.exit(ngx.HTTP_OK)
      }
    }
  }
}